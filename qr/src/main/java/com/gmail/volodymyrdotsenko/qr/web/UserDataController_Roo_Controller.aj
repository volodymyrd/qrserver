// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.gmail.volodymyrdotsenko.qr.web;

import com.gmail.volodymyrdotsenko.qr.domain.UserData;
import com.gmail.volodymyrdotsenko.qr.web.UserDataController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect UserDataController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String UserDataController.create(@Valid UserData userData, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, userData);
            return "userdatas/create";
        }
        uiModel.asMap().clear();
        userData.persist();
        return "redirect:/userdatas/" + encodeUrlPathSegment(userData.getUserName().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String UserDataController.createForm(Model uiModel) {
        populateEditForm(uiModel, new UserData());
        return "userdatas/create";
    }
    
    @RequestMapping(value = "/{userName}", produces = "text/html")
    public String UserDataController.show(@PathVariable("userName") String userName, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("userdata", UserData.findUserData(userName));
        uiModel.addAttribute("itemId", userName);
        return "userdatas/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String UserDataController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("userdatas", UserData.findUserDataEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) UserData.countUserDatas() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("userdatas", UserData.findAllUserDatas(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "userdatas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String UserDataController.update(@Valid UserData userData, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, userData);
            return "userdatas/update";
        }
        uiModel.asMap().clear();
        userData.merge();
        return "redirect:/userdatas/" + encodeUrlPathSegment(userData.getUserName().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{userName}", params = "form", produces = "text/html")
    public String UserDataController.updateForm(@PathVariable("userName") String userName, Model uiModel) {
        populateEditForm(uiModel, UserData.findUserData(userName));
        return "userdatas/update";
    }
    
    @RequestMapping(value = "/{userName}", method = RequestMethod.DELETE, produces = "text/html")
    public String UserDataController.delete(@PathVariable("userName") String userName, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        UserData userData = UserData.findUserData(userName);
        userData.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/userdatas";
    }
    
    void UserDataController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("userData_regdate_date_format", "dd.MM.yyyy HH:mm:ss");
        uiModel.addAttribute("userData_expired_date_format", "dd.MM.yyyy");
    }
    
    void UserDataController.populateEditForm(Model uiModel, UserData userData) {
        uiModel.addAttribute("userData", userData);
        addDateTimeFormatPatterns(uiModel);
    }
    
    String UserDataController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
